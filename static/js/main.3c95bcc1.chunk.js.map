{"version":3,"sources":["assets/images/cat-bg.png","components/Product/Product.js","components/Products/Products.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InfoDefault","select","className","href","onClick","InfoDisabled","flavoure","IntroSelectedHover","Product","id","intro","brand","quantity","weight","gift","description","isAvailable","isSelected","selectProduct","useState","isHovered","setIsHovered","selectProductHandler","onMouseEnter","onMouseLeave","src","BgImage","alt","Products","products","setProducts","map","product","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,oC,wOCKrCC,EAAc,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACpB,OACE,iKACE,4BAAQC,UAAU,iBAAiBC,KAAK,KAAKC,QAAS,kBAAMH,MAA5D,gCAKAI,EAAe,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACrB,OACE,0BAAMJ,UAAU,yBAAhB,qDAAoDI,EAApD,mEAIEC,EAAqB,WACzB,OACE,0BAAML,UAAU,yBAAhB,4FAoDWM,EAhDC,SAAC,GAEV,IADLC,EACI,EADJA,GAAIC,EACA,EADAA,MAAOC,EACP,EADOA,MAAOL,EACd,EADcA,SAAUM,EACxB,EADwBA,SAAUC,EAClC,EADkCA,OAAQC,EAC1C,EAD0CA,KAAMC,EAChD,EADgDA,YAAaC,EAC7D,EAD6DA,YAAaC,EAC1E,EAD0EA,WAAYC,EACtF,EADsFA,cACtF,EAM8BC,oBAAS,GANvC,mBAMGC,EANH,KAMcC,EANd,KAQJ,OACI,wBAAInB,UAAS,oCACNe,EAAa,WAAa,GADpB,uBAELD,EAA2B,GAAb,YAClBP,GAAKA,GACP,yBAAKP,UAAU,kBACb,6BAASA,UAAU,OACXE,QAAU,kBAbG,SAACK,GAC5BS,EAAcT,GAYgBa,CAAqBb,IACrCc,aAAe,kBAAMF,GAAa,IAClCG,aAAe,kBAAMH,GAAa,KACxC,uBAAGnB,UAAU,eACTe,GAAcG,EAAY,kBAAC,EAAD,MAAwBV,GAEtD,wBAAIR,UAAU,eAAgBS,GAC9B,uBAAGT,UAAU,eAAgBI,GAC7B,uBAAGJ,UAAU,iBACX,2BAAKU,GADP,wCAC4B,6BAC1B,2BAAKE,IAEP,yBAAKZ,UAAU,cAAcuB,IAAMC,IAAUC,IAAI,QACjD,yBAAKzB,UAAU,wBACf,0BAAMA,UAAU,gBAAiBW,GACjC,0BAAMX,UAAU,qBAAhB,mBAIJ,yBAAKA,UAAU,mBACK,IAAhBc,GACe,IAAfC,EAAsBF,EACtB,kBAAC,EAAD,CAAad,OAAW,kBAAMiB,EAAcT,MAC1C,kBAAC,EAAD,CAAcH,SAAaA,OCc1BsB,EA3EE,WAAO,IAAD,EAEWT,mBAAS,CACvC,CACEV,GAAI,EACJE,MAAO,6CACPD,MAAO,uKACPJ,SAAU,+CACVM,SAAU,GACVC,OAAQ,MACRC,KAAM,6EACNC,YAAa,4LACbC,aAAa,EACbC,YAAY,GAEd,CACER,GAAI,EACJE,MAAO,6CACPD,MAAO,uKACPJ,SAAU,wCACVM,SAAU,GACVC,OAAQ,IACRC,KAAM,+EACNC,YAAa,qPACbC,aAAa,EACbC,YAAY,GAEd,CACER,GAAI,EACJE,MAAO,6CACPD,MAAO,uKACPJ,SAAU,wCACVM,SAAU,IACVC,OAAQ,IACRC,KAAM,iLACNC,YAAa,8LACbC,aAAa,EACbC,YAAY,KArCK,mBAEdY,EAFc,KAEJC,EAFI,KAyCfZ,EAAgB,SAACT,GACrBqB,EACED,EAASE,KAAI,SAAAC,GAKX,OAJIA,EAAQvB,KAAOA,IAA8B,IAAxBuB,EAAQhB,cAC/BgB,EAAQf,YAAce,EAAQf,YAGzBe,OAKb,OACE,wBAAI9B,UAAU,sBACV2B,EAASE,KAAI,SAACC,EAASC,GAAV,OACb,kBAAC,EAAD,CACExB,GAAOuB,EAAQvB,GACfC,MAAUsB,EAAQtB,MAClBC,MAAUqB,EAAQrB,MAClBL,SAAa0B,EAAQ1B,SACrBM,SAAaoB,EAAQpB,SACrBC,OAAWmB,EAAQnB,OACnBC,KAASkB,EAAQlB,KACjBC,YAAgBiB,EAAQjB,YACxBC,YAAgBgB,EAAQhB,YACxBC,WAAee,EAAQf,WACvBC,cAAkBA,EAClBgB,IAAQD,SC3DHE,EATH,WACV,OACE,yBAAKjC,UAAU,OACb,wBAAIA,UAAU,cAAd,sIACA,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c95bcc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-bg.6eaa7dbe.png\";","import React, { useState } from \"react\";\nimport \"./Product.scss\";\nimport BgImage from '../../assets/images/cat-bg.png';\n\n\nconst InfoDefault = ({select}) => {\n  return (\n    <p>Чего сидишь? Порадуй котэ,\n      <button className=\"products__link\" href=\"#!\" onClick={() => select()}> купи.</button>\n    </p>\n  )\n}\n\nconst InfoDisabled = ({flavoure}) => {\n  return (\n    <span className=\"products__info--point\">Печалька, { flavoure } закончился.</span>\n  )\n}\n\nconst IntroSelectedHover = () => {\n  return (\n    <span className=\"card__intro--selected\">Котэ не одобряет?</span>\n  )\n}\n\nconst Product = ({\n  id, intro, brand, flavoure, quantity, weight, gift, description, isAvailable, isSelected, selectProduct\n}) => {\n\n  const selectProductHandler = (id) => {\n    selectProduct(id);\n  }\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  return (\n      <li className={ `products__item\n          ${ isSelected ? \"selected\" : \"\" }\n          ${ !isAvailable ? \"disabled\" : \"\"}` }\n          id={ id }>\n        <div className=\"products__card\">\n          <section className=\"card\"\n                  onClick={ () => selectProductHandler(id) }\n                  onMouseEnter={ () => setIsHovered(true) }\n                  onMouseLeave={ () => setIsHovered(false) }>\n            <p className=\"card__intro\">\n              { isSelected && isHovered ? <IntroSelectedHover/> : intro }\n            </p>\n            <h2 className=\"card__title\">{ brand }</h2>\n            <p className=\"card__taste\">{ flavoure }</p>\n            <p className=\"card__numbers\">\n              <b>{ quantity }</b> порций<br />\n              <b>{ gift }</b>\n            </p>\n            <img className=\"card__image\" src={ BgImage } alt=\"cat\"/>\n            <div className=\"card__weight-wrapper\">\n            <span className=\"card__weight\">{ weight }</span>\n            <span className=\"card__weight-unit\">кг</span>\n          </div>\n          </section>\n        </div>\n        <div className=\"products__info\">\n          { isAvailable === true ? (\n            isSelected === true ? description :\n            <InfoDefault select = { () => selectProduct(id) } />\n          ) : <InfoDisabled flavoure = { flavoure }/>\n          }\n        </div>\n      </li>\n\n  );\n}\n\nexport default Product;\n","import React, { useState } from \"react\";\nimport \"./Products.scss\";\nimport Product from \"../Product/Product\";\n\nconst Products = () => {\n\n  const [products, setProducts] = useState([\n    {\n      id: 0,\n      brand: \"Нямушка\",\n      intro: \"Сказочное заморское лакомство\",\n      flavoure: \"с фуа-гра\",\n      quantity: 10,\n      weight: \"0,5\",\n      gift: \"Мышь в подарок\",\n      description: \"Печень утки разварная с артишоками.\",\n      isAvailable: true,\n      isSelected: false\n    },\n    {\n      id: 1,\n      brand: \"Нямушка\",\n      intro: \"Сказочное заморское лакомство\",\n      flavoure: \"с рыбой\",\n      quantity: 40,\n      weight: \"2\",\n      gift: \"2 мыши в подарок\",\n      description: \"Головы щучьи с чесноком, да свежайшая сёмгушка.\",\n      isAvailable: true,\n      isSelected: false\n    },\n    {\n      id: 2,\n      brand: \"Нямушка\",\n      intro: \"Сказочное заморское лакомство\",\n      flavoure: \"с курой\",\n      quantity: 100,\n      weight: \"5\",\n      gift: \"5 мышей в подарок заказчик доволен\",\n      description: \"Филе из цыплят с трюфелями в бульоне.\",\n      isAvailable: false,\n      isSelected: false\n    }\n  ])\n\n  const selectProduct = (id) => {\n    setProducts(\n      products.map(product => {\n        if (product.id === id && product.isAvailable === true) {\n          product.isSelected = !product.isSelected;\n        }\n\n        return product;\n      })\n    );\n  };\n\n  return (\n    <ul className=\"app__list products\">\n      { products.map((product, index) => (\n        <Product\n          id = { product.id }\n          intro = { product.intro }\n          brand = { product.brand }\n          flavoure = { product.flavoure }\n          quantity = { product.quantity }\n          weight = { product.weight }\n          gift = { product.gift }\n          description = { product.description }\n          isAvailable = { product.isAvailable }\n          isSelected = { product.isSelected }\n          selectProduct = { selectProduct }\n          key = { index }/>\n      ))\n    }\n    </ul>\n  );\n}\n\nexport default Products;\n","import React from 'react';\nimport './App.scss';\nimport Products from './components/Products/Products';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Ты сегодня покормил кота?</h1>\n      <Products />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}